---
title: "Syllable frequency by cognateness"
format: html
warning: false
echo: false
code-fold: true
message: false
---

```{r setup}
tar_load_globals()
tar_load(childes)
tar_load(bvq_data)
tar_load(items)

library(dplyr)
library(tidyr)
library(ggplot2)
library(gt)
library(janitor)
library(tidytext)

theme_set(theme_custom()) # set custom ggplot theme

clrs <- c("#003f5c", "#58508d", "#bc5090", "#ff6361", "#ffa600")

duplicated_te <- bvq_data$pool$te[duplicated(bvq_data$pool$te)]

pool_tmp <- bvq_data$pool |>
    # drop items with missing observations in these variables
    drop_na(sampa, wordbank_lemma) |>
    filter(n_lemmas == 1,
           # exclude items with more than two lemmas
           !is_multiword,
           # exclude multi-word items
           include,
           # exclude problematic items (e.g., multi-word items)
           te %in% duplicated_te) |>
    add_count(te, name = "n_te") |> # get only items with one translation in each language
    filter(n_te == 2) |>
    distinct(language, te, .keep_all = TRUE) |> 
    select(language, te, item, label, childes_lemma, ipa, sampa) |> 
    mutate(syll = strsplit(ipa, "\\.|ˈ"),
           syll = map(syll, function(x) x[!(x=="")]),
           n_syll = map_int(syll, length),
           item = str_remove(item, "cat_|spa_")) 

```

We define syllable frequency as the rate of appearance of individual syllables in the word-forms included in the Barcelona Vocabulary Questionnaire (BVQ). Each item corresponds to a Catalan or Spanish word, and has an associated phonological transcription in International Phonological Alphabet (IPA) format. These transcriptions are syllabified: syllables are separated by the `.` or the `ˈ` (marking that the upcoming syllable after is) symbols. Some examples:

```{r items-table}
#| label: tbl-items
#| tbl-cap: Sample of items included in the BVQ questionnaire and  their syllabified IPA transcriptions in Catalan and Spanish
items |> 
    distinct(te, item, language, meaning, ipa) |> 
    left_join(distinct(pool_tmp, te, item, label)) |> 
    pivot_wider(names_from = language,
                values_from = c(item, label, ipa),
                id_cols = c(te, meaning),
                names_repair = make_clean_names,
                values_fn = first) |> 
    sample_n(20) |> 
    gt() |> 
    cols_hide(c(te, item_catalan, item_spanish)) |> 
    tab_spanner("Catalan", matches("catalan")) |> 
    tab_spanner("Spanish", matches("spanish")) |> 
    cols_label(meaning = "Translation equivalent",
               label_catalan = "Item",
               ipa_catalan = "IPA",
               label_spanish = "Item",
               ipa_spanish = "IPA") |> 
    tab_style(cell_text(weight = "bold"),
              cells_column_spanners()) |> 
    tab_style(cell_text(style = "italic"),
              cells_column_labels())
```


# Number of syllables

```{r syl-number}
#| label: fig-syl-number
#| fig-cap: Distribution of the number of syllables in Catalan and Spanish
pool_tmp |> 
    group_by(language) |> 
    add_count(language, name = "n_lang") |> 
    ungroup() |> 
    count(language, n_lang, n_syll) |> 
    mutate(prop = n/n_lang) |> 
    ggplot(aes(n_syll, n, fill = language)) +
    facet_wrap(~ language) +
    geom_col(colour = "white") +
    geom_text(aes(label = percent(prop)),
              size = 3,
              position = position_nudge(y = 15),
              colour = "black") +
    labs(x = "Number of syllables",
         y = "Number of words",
         fill = "Language") +
    scale_fill_manual(values = clrs[c(1, 4)]) +
    theme(legend.position = "none",
          panel.grid.major.x = element_blank())
```

# Lexical frequencies

We extracted lexical frequencies from the English corpora in the CHILDES database. Using the Catalan and Spanish corpora was not possible due to the low number of children and tokens included in the corpora. 

```{r lex-freq}
#| label: fig-lexical-freq
#| fig-cap: "Distribution of lexical frequencies from CHILDES."
freq_df <- pool_tmp |>
    left_join(childes, by = c("childes_lemma" = "token")) |> 
    select(te, language, ipa, freq_million) |> 
    drop_na(freq_million) |> 
    rename(freq_lex = freq_million)

freq_df |> 
    distinct(te, freq_lex) |> 
    ggplot(aes(freq_lex)) +
    geom_histogram(colour = "white",
                   fill = clrs[1],
                   bins = 30) +
    geom_rug(colour = clrs[4],
             alpha = 0.5) +
    labs(x = "Lexical frequency (CHILDES)",
         y = "Counts") +
    scale_x_continuous(trans = "log10",
                       labels = \(x) format(x, big.mark = ","))
```

# Weighting syllable counts by lexical frequency

Every exposure to a word-form also counts as a exposure to each of the syllables that make up such word. Every time a child hears the word *casa* [house], they are exposed to the syllables *ca* and *sa*. Syllables that appear embedded in words with higher lexical frequency will also be more frequent. To compute the relative frequency of each syllable in Catalan and Spanish (i.e., how many times the syllables appears in every million words in Catalan or Spanish speech), we summed the relative lexical frequency in CHILDES of every word that contains such syllable in the corresponding language.

```{r syl-freq}
#| label: fig-syl-counts
#| fig-cap: "Distribution of apositional syllable frequencies in Spanish and Catalan"
#| fig-height: 5
#| fig-width: 9
syll <- items |> 
    left_join(distinct(pool_tmp, te, childes_lemma)) |> 
    left_join(select(childes, token, freq_lex = freq_million),
              by = c("childes_lemma" = "token")) |> 
    select(language, item, te, meaning, ipa, lv, freq_lex) |> 
    mutate(syll = strsplit(ipa, "\\.|ˈ"),
           syll = map(syll, function(x) x[!(x=="")]),
           n_syll = map_int(syll, length),
           item = str_remove(item, "cat_|spa_")) |> 
    unnest_longer(syll) |> 
    group_by(language, syll) |> 
    summarise(freq_syll = sum(freq_lex),
              .groups = "drop") |> 
    arrange(language, desc(freq_syll))

syll |> 
    add_count(language, name = "n_lang") |> 
    mutate(language = paste0(language, " (n = ", n_lang, ")")) |> 
    ggplot(aes(freq_syll,
               fill = language, 
               colour = language)) +
    facet_wrap(~language) +
    geom_histogram(colour = "white",
                   position = position_nudge(y = 0.1)) +
    geom_rug(alpha = 1/4) +
    labs(x = "Relative frequency (counts per million)",
         y = "Number of syllables",
         fill = "Language",
         colour = "Language") +
    scale_x_continuous(trans = "log10",
                       labels = \(x) format(x, big.mark = ",")) +
    scale_colour_manual(values = clrs[c(1, 4)]) +
    scale_fill_manual(values = clrs[c(1, 4)]) +
    theme(legend.title = element_blank(),
          legend.position = "none")
```


```{r top-syll-freq}
#| label: fig-top-syll-freq
#| fig-cap: "Top 30 most frequent syllables"
syll |> 
    group_by(language) |> 
    top_n(30, freq_syll) |> 
    ggplot(aes(reorder_within(syll, desc(freq_syll), language),
               freq_syll,
               fill = language)) +
    facet_wrap(~ language,
               scales = "free_x",
               ncol = 1) +
    geom_col(colour = "white") +
    labs(x = "Syllable",
         y = "Relative frequency\n(counts per million)",
         colour = "Language",
         fill = "Language") +
    scale_fill_manual(values = clrs[c(1, 4)]) +
    scale_x_reordered() +
    scale_y_continuous(labels = \(x) format(x, big.mark = ",")) +
    theme(legend.position = "none",
          axis.title.x = element_blank(),
          axis.text.x = element_text(size = 10),
          panel.grid.major.x = element_blank())
```

# Positional syllable frequency

```{r pos-syll-freq}
#| label: fig-pos-freq
#| fig-cap: "Distribution of positional syllable frequencies, split by language and syllable position (1, 2, or 3)."

syll_pos <- items |> 
    left_join(distinct(pool_tmp, te, childes_lemma)) |> 
    left_join(select(childes, token, freq_lex = freq_million),
              by = c("childes_lemma" = "token")) |> 
    select(language, item, te, meaning, ipa, lv, freq_lex) |> 
    mutate(syll = strsplit(ipa, "\\.|ˈ"),
           syll = map(syll, function(x) x[!(x=="")]),
           n_syll = map_int(syll, length),
           item = str_remove(item, "cat_|spa_")) |> 
    unnest_longer(syll, indices_to = "position") |> 
    group_by(language, position, syll) |> 
    summarise(freq_syll_pos = sum(freq_lex),
              .groups = "drop") |> 
    mutate(position = factor(position, ordered = TRUE)) |> 
    filter(position < 4) |> 
    arrange(language, desc(freq_syll_pos))

ggplot(syll_pos, aes(position,
                     freq_syll_pos,
                     fill = language, 
                     colour = language)) +
    facet_wrap(~language) +
    geom_point(alpha = 1/4,
               size = 2,
               shape = 1,
               stroke = 1,
               position = position_jitter(width = 0.1)) +
    stat_summary(fun.data = mean_se,
                 geom = "errorbar",
                 width = 0.2,
                 colour = "black",
                 linewidth = 0.75) +
    stat_summary(fun = mean,
                 geom = "point",
                 size = 1.5,
                 colour = "black") +
    labs(x = "Syllable position",
         y = "Positional relative frequency\n(counts per million)",
         fill = "Language",
         colour = "Language") +
    scale_y_continuous(trans = "log10",
                       labels = \(x) format(x, big.mark = ",")) +
    scale_colour_manual(values = clrs[c(1, 4)]) +
    scale_fill_manual(values = clrs[c(1, 4)]) +
    theme(legend.title = element_blank(),
          legend.position = "none",
          panel.grid.major.x = element_blank())
```


```{r top-pos-syll-freq}
#| label: fig-top-pos-syll-freq
#| fig-cap: "Top 20 most frequent syllables by position."
#| fig-width: 13
#| fig-height: 4
syll_pos |> 
    group_by(language, position) |> 
    top_n(20, freq_syll_pos) |> 
    ggplot(aes(reorder_within(syll, 
                              desc(freq_syll_pos),
                              list(language, position)),
               freq_syll_pos,
               fill = language)) +
    facet_wrap(language ~ position,
               scales = "free_x",
               ncol = 3,
               labeller = \(x) label_value(x, multi_line = FALSE)) +
    geom_col(colour = "white") +
    labs(x = "Syllable",
         y = "Relative frequency\n(counts per million)",
         colour = "Language",
         fill = "Language") +
    scale_fill_manual(values = clrs[c(1, 4)]) +
    scale_x_reordered() +
    scale_y_continuous(labels = \(x) format(x, big.mark = ",")) +
    theme(legend.position = "none",
          axis.title.x = element_blank(),
          axis.text.x = element_text(size = 8),
          panel.grid.major.x = element_blank())
```


# Are cognates made of more frequent syllables?

```{r cognate-freq}

lv_similarities <- pool_tmp |>
    mutate(sampa = str_remove_all(sampa, "\\.")) |>
    pivot_wider(
        id_cols = te,
        names_from = language,
        values_from = sampa,
        names_repair = make_clean_names
    ) |>
    # make sure strings are coded as UTF-8 before computing LVs
    mutate(lv = stringsim(catalan, spanish)) |>
    distinct(te, lv)

syll_lv <- pool_tmp |> 
    left_join(lv_similarities) |> 
    unnest_longer(syll, indices_to = "position") |> 
    left_join(syll, by = c("syll", "language")) |> 
    group_by(te, lv, n_syll, language) |> 
    summarise(freq_syll_sum = sum(freq_syll),
              .groups = "drop") |> 
    drop_na(freq_syll_sum)

syll_lv |> 
    add_count(language, name = "n_lang") |> 
    mutate(language = paste0(language, " (n = ", n_lang, ")"),
           n_syll = paste0(n_syll, " syllables")) |> 
    ggplot(aes(lv, freq_syll_sum)) +
    facet_grid(language ~ n_syll) +
    geom_point(shape = 1,
               stroke = 1,
               colour = clrs[4],
               size = 2,
               alpha = 1/2) +
    geom_smooth(colour = clrs[1],
                fill = clrs[1]) +
    labs(x = "Levenshtein distance (cognatness)",
         y = "Additive syllable frequency\n(Counts per million)",
         colour = "Language",
         fill = "Language") +
    scale_colour_manual(values = clrs[c(1, 4)]) +
    scale_fill_manual(values = clrs[c(1, 4)]) +
    scale_y_continuous(trans = "log10",
                       labels = \(x) format(x,
                                            big.mark = ",",
                                            scientific = FALSE)) +
    scale_x_continuous(labels = percent) +
    theme(panel.grid.minor = element_blank(),
          legend.position = "none",
          axis.text = element_text(size = 9))

```
