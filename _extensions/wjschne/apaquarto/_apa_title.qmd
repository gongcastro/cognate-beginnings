```{r}
#| include: false
#| label: apasetup
options(tidyverse.quiet = TRUE)
library(conflicted)
library(tidyverse)
library(flextable)
library(ftExtra)
library(officer)
library(knitr)
conflicts_prefer(dplyr::filter, .quiet = TRUE)
conflicts_prefer(flextable::separate_header, .quiet = TRUE)

is_docx <- knitr::pandoc_to("docx", exact = FALSE)
is_pdf <- knitr::is_latex_output()

if (is_pdf) {
  knit_hooks$set(plot = function(x, options) {
    if (!is.null(options$`out.width`)) {
      figwidth <- options$`out.width`
    } else {
      if (!is.null(options$`fig.width`)) {
        figwidth <- paste(options$`fig.width`, "in")
      } else {
        figwidth <- "\\columnwidth"
      }
      
    }
    
    knitr::opts_current$set(output = "asis", fig.env = NULL)
    
    
    filename <- paste0(opts_knit$get("base.url"), paste(x, collapse = "."))
    
    if (stringr::str_ends(filename, ".svg")) {
      newname <- stringr::str_replace(filename, "svg$", "pdf")
      if (Sys.which("rsvg-convert") == "") stop ("cannot find rsvg-convert")
      convertcommand <- paste0('rsvg-convert --format=pdf "', filename, '" > "', newname,'"')
      # print(convertcommand)
      shell(convertcommand)
      filename <- newname
      
    }

    if (is.null(options$`apa-note`)) {
      fignote <- NULL
    } else {
      fignote <-  paste0("\n\n\\figurenote{", options$`apa-note`, "}\n\n")
    }


    output <- paste0("\n\n\\begin{figure}[h!]\n",
                   "\\caption{", options$`apa-cap`, "}\n",
                   "\\label{", options$label, "}\n",
      "\\includegraphics[width=",figwidth,"]{",
      filename,
      "}\n",
      fignote,
      "\n\\end{figure}\n\n"
      )
    # message(output)
    output
    })
}


knitr::knit_hooks$set(
  `apa-figtab` = function(before, options) {
    # Check if APA Figure or APA Table
    if (str_starts(options$label, pattern = "apafg-") |
        str_starts(options$label, pattern = "apatb-")) {
      # Figure or Table
      apatype <- ifelse(str_starts(as.character(options$label)[1],
                                   pattern = "apafg-"),
                        "figure",
                        "table")
      
      temp_label <- knitr::opts_current$get("label")


      # Format Before Chunk
      if (before) {
        knitr::opts_current$set(label = NULL, output = "asis")
        options$output <- "asis"
        if (is_pdf) {
          pre <- ""

          if (apatype == "table") {
            
            pre <- paste0(pre, "```{=latex}\n\\begin{table}\n\\caption{",
                          options$`apa-cap`,
                          "}\n\\label{",
                          options$`label`,"}\n```\n")
          }
          
        } else {
          pre <-
            paste0(
              '\n\n:::{#',
              options$label,
              ' .FigureTitle}\n\n{',
              options$label,
              '}\n\n:::\n\n'
            )
          
          if (!is.null(options$`apa-cap`)) {
            pre <- paste0(pre,
                          '\n\n:::{.Caption}\n\n',
                          options$`apa-cap`,
                          '\n\n:::\n\n')
          } else
            stop(
              paste0(
                "Chunk ",
                options$label,
                "is an APA figure/table chunk,  requires a caption. Set the `apa-cap` chunk option like so\n#| apa-cap: My caption"
              )
            )
          if (!all(is.null(options$`apa-note`))) {
            pre <- paste0(pre, '\n\n:::{.FigureWithNote}\n\n')
            
          } else {
            pre <- paste0(pre, '\n\n:::{.FigureWithoutNote}\n\n')
          }
          
          
        }
        
        pre
      } else {
        # post begins here ----
        knitr::opts_current$set(label = temp_label)
        post <- "\n\n"
        
        if (is_pdf) {
          if (apatype == "table") {
            if (!all(is.null(options$`apa-note`))) {
              post <- paste0(post,"\\tablenote{", options$`apa-note`, "}\n\n")
            }
            post <- paste0("```{=latex}\n", post, "\\end{table}\n```\n")
          }
        } else {
          if (!all(is.null(options$`apa-note`))) {
            post <- paste(
              post,
              '\n\n:::{.FigureNote custom-style="FigureNote"}\n*Note*. ',
              options$`apa-note`,
              '\n:::\n'
            )
          } else if (apatype == "Table") {
            post <- paste0(post,
                           '\n\n:::{custom-style="Body Text"}\n<br>\n:::')
          }
          
          post <- paste0(post, "\n\n:::\n\n")
          
          
        }
        post
        
        
        
      }
    }
    
  }
)

```

```{r}
#| label: metadatasetup
#| echo: false
is_empty = function(x) {
  is.null(x)  || is.na(x)  || is.nan(x) || length(x) == 0 || x == ""
}

get_metadata <- function(filename = "template.qmd") {
  if (interactive()) {
  rmarkdown::yaml_front_matter(filename)
} else {
  rmarkdown::metadata
}
}




# If yaml is just a character, assign to a field called name
character2name <- function(x) {
  if (is.character(x)) {
    list(name = x)
  } else {
    x
  }
}


affiliation_namer <- function(d) {
  # If affiliation is not given.
  # print(d)
  if (is.null(d$affiliations)) {
    d$affiliations <- map(1, \(x) tibble(name = "Unaffiliated"))
  }
  if (is.character(d$affiliations)) {
    d$affiliations <- map(d$affiliations, \(x) tibble(name = x))
  }
  if (is.list(d$affiliations)) {
    d$affiliations <- map(d$affiliations, \(dd) as_tibble(compact(dd)))
  }
    
  d
}  

  
  

f_author_affiliations <- function(yml) {
  yml %>%
    compact() |> 
    map(character2name) %>% 
    map(affiliation_namer) %>% 
    map(as_tibble) %>%
    bind_rows() %>% 
    bind_rows(
      tibble(
        id = character(0),
        number = integer(0),
        name = character(0),
        url = character(0),
        email = character(0),
        affiliations = list(0),
        fax = character(0),
        orcid = character(0),
        note = character(0),
        acknowledgements = character(0),
        corresponding = logical(0),
        `equal-contributor` = logical(0),
        deceased = logical(0)
      )
    ) %>% 
    mutate(affiliations = map(affiliations, \(d) {
      colnames(d) <- paste0("affiliations_", colnames(d))
      d
    })) %>% 
    rename(author = name,
           author_number = number,
           author_url = url) %>%
    nest(.by = author) %>%
    mutate(author_id = row_number(), .before = 1L) %>%
    unnest(data) %>% 
    unnest(affiliations) %>% 
     bind_rows(
      tibble(  id = character(0),
               number = character(0),
               name = character(0),
               department = character(0),
               address = character(0),
               city = character(0),
               region = character(0),
               `postal-code` = character(0),
               country = character(0),
               url = character(0)
      ) |>
        rename_with(\(x) paste0("affiliations_",x))
    ) |> 
    unite(
      regioncode,
      affiliations_region,
      `affiliations_postal-code`,
      remove = F,
      sep = " ",
      na.rm = TRUE
    ) %>%
    unite(
      affiliations_default,
      affiliations_city,
      affiliations_region,
      affiliations_country,
      na.rm = TRUE,
      remove = F,
      sep = ", "
    ) %>%
    unite(
      mailing,
      affiliations_address,
      affiliations_city,
      regioncode,
      affiliations_country,
      sep = ", ",
      na.rm = TRUE
    ) %>%
    unite(
      affiliations,
      affiliations_department,
      affiliations_name,
      sep = ", ",
      na.rm = T,
      remove = F
    ) %>%
    unique() %>% 
    mutate(affiliations = ifelse(
      is.null(affiliations) | affiliations %in% c("NULL", "", "Unaffiliated"),
      ifelse(
        is.na(affiliations_default) |
          affiliations_default %in% c("NULL", "", "Unaffiliated"),
        "Unaffiliated",
        affiliations_default
      ),
      affiliations
    )) %>% 
    nest(.by = affiliations) %>%
    mutate(affiliations_row = row_number()) %>%
    unnest(data) %>%
    mutate(affs = paste0(affiliations_row, collapse = ","),
           .by = author) %>%
    mutate(
      max_author = max(author_id, na.rm = TRUE),
      max_affiliations = max(affiliations_row, na.rm = TRUE),
      count_affs = length(unique(affs)),
      author_display = ifelse(
        count_affs == 1 | max_author == 1,
        author,
        paste0(author, "^", affs, "^")
      ),
      affiliations_display = ifelse(
        count_affs == 1 |
          max_author == 1,
        affiliations,
        paste0("^", affiliations_row, "^", affiliations)
      )
    )
  
}



  
f_author_display <- function(d) {
  d %>%
  arrange(author_id) %>% 
  pull(author_display) %>%
  unique() %>%
  knitr::combine_words()
}

f_affiliations_display <- function(d) {
  d |> 
  pull(affiliations_display) %>% 
  unique() %>% 
  paste0(collapse = "\n\n") 
}

f_author_affiliations_display <- function(authors, affiliations) {
  if (all(c(authors, affiliations) == "")) {
    s <- ""
  } else {
    s <- paste("\n\n<br>\n\n:::{.Author}",
               authors,
               affiliations,
               ":::",
               sep = "\n\n")
  }
  s
}

f_orcids_display <- function(author_affiliations) {
  author_affiliations |>
    select(author, orcid) %>%
    unique() %>%
    filter(!orcid == "NULL") %>%
    mutate(
      orcid_display = paste0(
        author,
        " ![Orchid ID Logo: A green circle with white letters ID](_extensions/wjschne/apaquarto/ORCID-iD_icon-vector.svg){width=16px} https://orcid.org/",
        orcid
      )
    ) %>%
    pull(orcid_display) %>%
    unique() %>%
    paste0(collapse = "\n\n")
}



f_correspondings <- function(author_affiliations) {
  s <- author_affiliations |>
    filter(corresponding) %>%
    select(author) %>%
    unique() %>%
    pull()
  if (length(s) > 1) stop(paste0("More than one author is set as the corresponding author. Set corresponding to `true` for only one of these authors:\n", knitr::combine_words(s), "."))

if (length(s) == 0) stop(paste0("No corresponding author has been set in the meta data at the top of the document. Under one of the authors' names, set the `corresponding` field to `true` like so:\nauthor:\n  -name: Fred Jones\n   corresponding: true"))
  s
}

f_corresponding_author_display <- function(author_affiliations, corresponding) {
  author_affiliations %>% 
  filter(corresponding) %>% 
  slice(1) %>% 
  select(author, mailing, affiliations, email) %>% 
  mutate(email = ifelse(is.na(email), NA, paste0("Email: ", email)),
         mailing = ifelse(mailing == "", NA, mailing),
         corresponding_text = "Correspondence concerning this article should be addressed to ") %>% 
  unite(corresponding_text, corresponding_text, author, sep = " ", na.rm = T, remove = T) %>% 
   unite(corresponding_text, corresponding_text, affiliations, mailing, email, sep = ", ", na.rm = T, remove = T) %>% 
  pull(corresponding_text)
}

f_author_note_second_paragraph <- function(yml) {
  if (is.null(yml$`author-note`$`status-changes`)) {
    s <- ""
  } else {
    s <-
      yml$`author-note`$`status-changes` %>%
      map(\(x) ifelse(is.null(x), NA, x)) %>%
      as_tibble() %>%
      unite(
        paragraph,
        everything(),
        sep = " ",
        remove = T,
        na.rm = T
      ) %>%
      pull(paragraph)
  }
  s
}


f_author_note_third_paragraph <- function(yml) {
  if (is.null(yml$`author-note`$disclosures)) {
    s <- ""
  } else {
    s <- yml$`author-note`$disclosures %>%
      map(\(x) ifelse(is.null(x), NA, x)) %>%
      as_tibble() %>%
      unite(
        paragraph,
        everything(),
        sep = " ",
        remove = T,
        na.rm = T
      ) %>%
      pull(paragraph)
  }
  s
}
  
# yml_metadata <- get_metadata()
# yml <- yml_metadata$author



f_author_note_blanks <- function(yml) {
  if (!is_docx) {
    blanks <- 1
  } else if (is.null(yml$`author-note`$`blank-lines-above-author-note`)) {
    blanks <- 3
  } else {
    blanks <- yml$`author-note`$`blank-lines-above-author-note`
  }
  blanks  
}

f_title_blanks <- function(yml) {
  if (!is_docx) {
    blanks <- 1
  } else if (is.null(yml$`blank-lines-above-title`)) {
    blanks <- 2
  } else {
    blanks <- yml$`blank-lines-above-title`
  }
  paste0(rep("<br>", blanks), collapse = "\n\n")
}




f_author_note_display <- function(yml) {
  
  author_note_second_paragraph <- f_author_note_second_paragraph(yml)
  author_note_third_paragraph <- f_author_note_third_paragraph(yml)
  author_note_blanks <- f_author_note_blanks(yml)
  title_blank_display <- f_title_blanks(yml)
  
  if (all(
    c(
      display_orcids,
      author_note_second_paragraph,
      author_note_third_paragraph,
      display_corresponding_author
    ) == ""
  )) {
    s <- ""
  } else {
    s <- paste(
      paste0(rep("<br>", author_note_blanks), collapse = "\n\n"),
      ":::{.AuthorNote}",
      "# Author Note",
      display_orcids,
      author_note_second_paragraph,
      author_note_third_paragraph,
      display_corresponding_author,
      ":::",
      sep = "\n\n"
    )
  }
  s
}

f_keywords_display <- function(yml) {
  if (is.null(yml$keywords)) {
    s <- NULL
  } else {
    s <-  paste0("*Keywords*: ", paste0(yml$keywords, collapse = ", "))
    
  }
  s
}

f_title_display <- function(title, subtitle) {
  if (is_empty(title)) return(NULL)
  strtitle <- trimws(title) %>% str_remove(":$")
  if (!is_empty(subtitle)) {
    strtitle <- paste0(strtitle, ": ", subtitle)
  } 
  strtitle <- paste0("# ", strtitle, " {.title}")
}

yml_metadata <- get_metadata()
d_author_affiliations <- f_author_affiliations(yml_metadata$author)

display_authors <- f_author_display(d_author_affiliations)

display_affiliations <- f_affiliations_display(d_author_affiliations) 
  
display_author_affiliations <- f_author_affiliations_display(
  display_authors,
  display_affiliations
)

display_orcids <-  f_orcids_display(d_author_affiliations)
correspondings <- f_correspondings(d_author_affiliations)

display_corresponding_author <- f_corresponding_author_display(
  d_author_affiliations, 
  correspondings)
display_author_note <- f_author_note_display(yml_metadata)



display_keywords <- f_keywords_display(yml_metadata)




display_title <- f_title_display(yml_metadata$title , yml_metadata$subtitle)

if (is_docx) {
  if (!interactive()) {
  library(officer)
  if (!is.null(yml_metadata$shorttitle)) {
    running_header <- str_to_upper(yml_metadata$shorttitle)
  } else if (!is.null(yml_metadata$title)) {
    running_header <- str_to_upper(yml_metadata$title)
  } else {
    running_header <- "SHORT TITLE"
  }
  
  read_docx("_extensions/wjschne/apaquarto/apaquarto.docx") %>%
    headers_replace_all_text("Running Header", running_header) %>%
    print("apa_processed.docx")
  
}
}



```

::::{.content-visible unless-format="pdf"}

`r display_title`

`r display_author_affiliations`

`r display_author_note`

{{< pagebreak >}}

:::{.Abstract}
# Abstract

{{< meta abstract >}}

`r display_keywords`
:::

{{< pagebreak >}}


# {{< meta title >}}

::::